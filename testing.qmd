---
title: "test"
format: html
---

```{r}
#sst_2008 <- rast(here('data','average_annual_sst_2008.tif'))
#sst_2009 <- rast(here('data','average_annual_sst_2009.tif'))
#sst_2010 <- rast(here('data','average_annual_sst_2010.tif'))
#sst_2011 <- rast(here('data','average_annual_sst_2011.tif'))
#sst_2012 <- rast(here('data','average_annual_sst_2012.tif'))
```


## Set Up

### Load libraries

```{r}
#| code-fold: true
#| code-summary: "Show the code"

library(terra) 
library(tidyverse)
library(tmap)
library(kableExtra) 
library(here)
library(sf)
library(stars)
library(viridis)
```

### Read in data
```{r echo = T, results = 'hide'}
#| code-fold: true
#| code-summary: "Show the code"

# Bathymetry
bath <- rast(here('data','depth.tif'))

# Exclusive Economic Zones
eez <- st_read(here('data', 'wc_regions_clean.shp'))
```

#### Combine SST rasters into raster stack to read in data
```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Sea surface temperature
#sst_2008 <- rast(here('data','average_annual_sst_2008.tif'))
#sst_2009 <- rast(here('data','average_annual_sst_2009.tif'))
#sst_2010 <- rast(here('data','average_annual_sst_2010.tif'))
#sst_2011 <- rast(here('data','average_annual_sst_2011.tif'))
#sst_2012 <- rast(here('data','average_annual_sst_2012.tif'))

# Combine SST into a list
sst <- list.files(here('data'),
                  pattern = 'average_annual_sst_20', 
                  full.names = TRUE)

# sst_stack <- c(sst_2008, sst_2009, sst_2010, sst_2010, sst_2011, sst_2012)

# Stack rasters
sst_stack <- raster::stack(sst)
```

#### Suitable growing conditions
Selecting a species with some reasonable potential for commercial consumption

Homarus americanus - American lobster
- SST: 6 C
- Depth: 4 - 50 m

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Check CRS of sst_stack
st_crs(sst_stack) # no CRS

# Convert to terra raster
sst_stack <- terra::rast(sst_stack)

# Match crs of sst to other CRS
sst_stack <- terra::project(sst_stack, "EPSG:4326")

# Check CRS between data sets
st_crs(bath) == st_crs(sst_stack)
st_crs(eez) == st_crs(sst_stack)

# Add warning to see if CRS match
if(st_crs(bath) == st_crs(eez) & st_crs(eez) == st_crs(sst_stack) & st_crs(bath) == st_crs(sst_stack)) { 
  print("coordinate reference systems of datasets match")
}  else {
  warning("cooridnate reference systems to not match")
}
```

## Process Data
```{r}
# Find mean SST from 2008-2012
sst_mean_k <- mean(sst_stack, na.rm = TRUE)

# Convert from K to C by subtracting -273.15
sst_mean <- sst_mean_k - 273.15
```

```{r}
# Crop depth raster to match the extent of the SST raster
bath_crop <- crop(bath, ext(sst_mean)) # match extent

# Match resolutions of SST and depth
bath_rs <- resample(bath_crop, sst_mean, method = "bilinear") # set method - week 4lab

# Stack rasters
stack_raster <- c(sst_mean, bath_rs)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Check that the depth and SST match in:

# Resolution
resolution(sst_mean) == resolution(bath_rs)

# Extent
ext(sst_mean) == ext(bath_rs)

# CRS
st_crs(sst_mean) == st_crs(bath_rs)
```


```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Visually check changes

# Cropped map
 tm_shape(bath_crop) +
  tm_raster(title = "Depth (m bsl)",
            palette = "-BrBG", midpoint = NA)  +
  tm_layout(main.title = "Crop Map",
            legend.outside = TRUE,
            legend.width = 5,
            title.size = 2)  +
  tm_compass(size = 2,
             position = c('left', 'top')) +
  tm_scale_bar(size = 2,
               position = c('right', 'bottom'))
# Resampled map
 tm_shape(bath_rs) +
  tm_raster(title = "Depth (m bsl)",
            palette = "-BrBG", midpoint = NA)  +
  tm_layout(main.title = "Resampled Map",
            legend.outside = TRUE,
            legend.width = 5,
            title.size = 2) +
   tm_compass(size = 2,
             position = c('left', 'top')) +
   tm_scale_bar(size = 2,
               position = c('right', 'bottom'))
```

## Find suitable locations

Recall Oyster optimal growing conditions:

- sea surface temperature: 11-30Â°C
- depth: 0-70 meters *below* sea level

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Reclassify sst and depth into oyster suitable locations

# Create reclassification matrix for sst
sst_reclass_mtx <- matrix(c(-Inf, 11, 0, # Temp below 11 degC is set to 0 for unsuitable
                            11, 30, 1, # Temp from 11-30 degC is 1 indicating suitable
                            30, Inf, 0), # Temp above 30 degC is unsuitable, set to 0
                            ncol = 3, byrow = TRUE)

# Create reclassification matrix for depth
bath_reclass_mtx <- matrix(c(-Inf, -70, 0, # Depth below 70 mbsl set to 0 indicating unsuitable
                             -70, 0, 1, # Depth from 0-70 mbsl is 1 for suitable
                             0, Inf, 0), # Depth greater than 0 m bsl set to 0 for unsuitable
                             ncol = 3, byrow = TRUE)

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Use reclassification matrix to reclassify sst and depth

# Depth reclassification
bath_rcl <- classify(stack_raster$depth, rcl = bath_reclass_mtx) # select only depth

plot(bath_rcl)


# SST/Temp reclassification
sst_rcl <- classify(stack_raster$mean, rcl = sst_reclass_mtx) # select only mean

plot(sst_rcl)
```

```{r}
# find locations that satisfy both SST and depth conditions

# Use lapp to multiply and determine conditions
# Anything multiplied by unsuitable will be 0, suitable will be 1


#location <- lapp(c(bath_rcl, sst_rcl),
 #                fun = function(x,y){return(x*y)} ) # write in generic x and y

suitable <- sst_rcl * bath_rcl

plot(suitable)

#tm_shape(location) +
 # tm_raster()
```

#####

## Process Data

```{r}
# Crop depth raster to match the extent of the SST raster
bath_crop <- crop(bath, ext(sst_mean)) # match extent

# Match resolutions of SST and depth
bath_rs <- resample(bath_crop, sst_mean, method = "near") # set method - week 4 lab

# Stack rasters for temperature and depth
stack_raster <- c(sst_mean, bath_rs)



# Check that the depth and SST match in:

# Resolution
resolution(sst_mean) == resolution(bath_rs)

# Extent
ext(sst_mean) == ext(bath_rs)

# CRS
st_crs(sst_mean) == st_crs(bath_rs)
```



```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Reclassify sst and depth into oyster suitable locations

# Create reclassification matrix for sst
sst_reclass_mtx <- matrix(c(-Inf, 11, NA, # Temp below 11 degC is set to NA for unsuitable
                            11, 30, 1, # Temp from 11-30 degC is 1 indicating suitable
                            30, Inf, NA), # Temp above 30 degC is unsuitable, set to NA
                            ncol = 3, byrow = TRUE)

# Create reclassification matrix for depth
bath_reclass_mtx <- matrix(c(-Inf, -70, NA, # Depth below 70 mbsl set to NA indicating unsuitable
                             -70, 0, 1, # Depth from 0-70 mbsl is 1 for suitable
                             0, Inf, NA), # Depth greater than 0 m bsl set to NA for unsuitable
                             ncol = 3, byrow = TRUE)


# Use reclassification matrix to reclassify sst and depth

# Depth reclassification
bath_rcl <- classify(stack_raster$depth, rcl = bath_reclass_mtx) # select only depth


# SST/Temp reclassification
sst_rcl <- classify(stack_raster$mean, rcl = sst_reclass_mtx) # select only mean

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Use reclassification matrix to reclassify sst and depth

# Depth reclassification
bath_rcl <- classify(stack_raster$depth, rcl = bath_reclass_mtx) # select only depth


# SST/Temp reclassification
sst_rcl <- classify(stack_raster$mean, rcl = sst_reclass_mtx) # select only mean

```

```{r}
# find locations that satisfy both SST and depth conditions

# Use lapp to multiply and determine conditions
# Anything multiplied by unsuitable will be 0, suitable will be 1

location <- lapp(c(bath_rcl, sst_rcl),
              fun = function(x,y){return(x*y)})

# Initial plot of suitable locations
plot(location)
```

## Determine the most suitable EEZ

```{r}
# Select suitable cells within West Coast EEZs

# Mask location raster to EEZ locations
masked_location <- mask(location, eez)

# Initial plot
plot(masked_location)
```

```{r}
# Find the area of grid cells using cellSize

suitable_area <- cellSize(x = masked_location, # Selecting suitable locations from above
                 mask = TRUE, # When true, previous NA will carry over
                 unit = 'km') # Selecting km from data

# Initial plot
plot(suitable_area)

```

```{r}
# Find the total suitable area within each EEZ

# Rasterize EEZ data
eez_raster <- rasterize(eez,
                        suitable_area, # to this raster
                        field = 'rgn') # Transfer values to each eez region

# Initial plot
plot(eez_raster)

# Use zonal algebra to aggregate a grouping variable
eez_suitable <- zonal(x = suitable_area, 
                      z = eez_raster, # Raster representing zones
                      fun = 'sum', # To add up total area
                      na.rm = TRUE)

# Print suitble area by EEZ
print(paste0("Oyster suitable area in ", eez_suitable$rgn[1], " is ", eez_suitable$area[1], 'km'))
print(paste0("Oyster suitable area in ", eez_suitable$rgn[2], " is ", eez_suitable$area[2], 'km'))
print(paste0("Oyster suitable area in ", eez_suitable$rgn[3], " is ", eez_suitable$area[3], 'km'))
print(paste0("Oyster suitable area in ", eez_suitable$rgn[4], " is ", eez_suitable$area[4], 'km'))
print(paste0("Oyster suitable area in ", eez_suitable$rgn[5], " is ", eez_suitable$area[5], 'km'))

```

```{r}
# Map of suitable EEZ for oysters

# Suitable oyster area
tm_shape(eez_raster) +
  tm_raster(title = "Total Suitable Area",
            palette= (c("#65AFFF", "#5899E2", "#335C81", "#4A85BF","#274060", "#1B2845"))) +
# CA Coast
  tm_shape(coast) +
  tm_polygons(col = 'tan') +

# Map layout
  tm_layout(
            legend.outside = TRUE,
            main.title = "Suitable Area for Oysters\nby EEZ Region",
            title.size = 5,
            legend.width = 5,
            legend.outside.size = 0.5) +
  tm_compass(position = c(0.025, 0.1),
             size = 1) +
  tm_scale_bar(position = c(0.1, 0.02),
               text.size = 5)

```


